---
import Layout from '../../layouts/AdminLayout.astro';
import { contentManagement, authManagement } from '../../lib/supabaseAdmin';

// Check if user is admin
const isAdmin = await authManagement.isAdmin();
if (!isAdmin) {
  return Astro.redirect('/admin/login');
}

// Get testimonials
let testimonials = [];
try {
  testimonials = await contentManagement.getTestimonials();
} catch (error) {
  console.error('Error fetching testimonials:', error);
}
---

<Layout title="Gestão de Testemunhos">
  <div class="pt-32 pb-20">
    <div class="container mx-auto px-4">
      <div class="max-w-6xl mx-auto">
        <!-- Header -->
        <div class="flex justify-between items-center mb-8">
          <div>
            <h1 class="text-3xl font-bold">Gestão de Testemunhos</h1>
            <p class="text-gray-600 mt-2">Gerencie os testemunhos dos seus clientes</p>
          </div>
          <div class="flex gap-4">
            <a 
              href="/admin"
              class="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:border-primary hover:text-primary transition-colors"
            >
              Voltar
            </a>
            <button 
              id="add-testimonial-btn"
              class="px-4 py-2 bg-primary text-white rounded-lg hover:bg-secondary transition-colors"
            >
              Adicionar Testemunho
            </button>
          </div>
        </div>

        <!-- Testimonials List -->
        <div class="bg-white rounded-xl shadow-lg overflow-hidden">
          <div class="p-6">
            <div class="overflow-x-auto">
              <table class="w-full">
                <thead>
                  <tr class="border-b">
                    <th class="text-left py-4 px-4">Foto</th>
                    <th class="text-left py-4 px-4">Nome</th>
                    <th class="text-left py-4 px-4">Função</th>
                    <th class="text-left py-4 px-4">Avaliação</th>
                    <th class="text-left py-4 px-4">Testemunho</th>
                    <th class="text-right py-4 px-4">Ações</th>
                  </tr>
                </thead>
                <tbody>
                  {testimonials.length > 0 ? (
                    testimonials.map((testimonial) => (
                      <tr class="border-b hover:bg-gray-50">
                        <td class="py-4 px-4">
                          {testimonial.testimonial_media && testimonial.testimonial_media.length > 0 ? (
                            <img 
                              src={testimonial.testimonial_media[0].url}
                              alt={testimonial.name}
                              class="w-12 h-12 object-cover rounded-full"
                            />
                          ) : (
                            <div class="w-12 h-12 bg-gray-200 rounded-full flex items-center justify-center">
                              <span class="text-gray-500 text-xs">{testimonial.name.substring(0, 2).toUpperCase()}</span>
                            </div>
                          )}
                        </td>
                        <td class="py-4 px-4 font-medium">{testimonial.name}</td>
                        <td class="py-4 px-4 text-gray-600">{testimonial.role || '-'}</td>
                        <td class="py-4 px-4">
                          <div class="flex">
                            {Array.from({ length: testimonial.rating || 5 }).map(() => (
                              <svg class="w-5 h-5 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                              </svg>
                            ))}
                          </div>
                        </td>
                        <td class="py-4 px-4 text-gray-600 max-w-xs truncate">{testimonial.content}</td>
                        <td class="py-4 px-4">
                          <div class="flex justify-end gap-2">
                            <button 
                              class="edit-testimonial-btn p-2 text-blue-600 hover:bg-blue-50 rounded-lg transition-colors"
                              data-testimonial-id={testimonial.id}
                            >
                              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                              </svg>
                            </button>
                            <button 
                              class="delete-testimonial-btn p-2 text-red-600 hover:bg-red-50 rounded-lg transition-colors"
                              data-testimonial-id={testimonial.id}
                            >
                              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                              </svg>
                            </button>
                          </div>
                        </td>
                      </tr>
                    ))
                  ) : (
                    <tr>
                      <td colspan="6" class="py-8 text-center text-gray-500">
                        Nenhum testemunho encontrado. Clique em "Adicionar Testemunho" para criar.
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal para adicionar/editar testemunho -->
  <div id="testimonial-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
    <div class="bg-white rounded-xl shadow-lg p-8 max-w-2xl w-full mx-4">
      <h2 id="modal-title" class="text-2xl font-bold mb-6">Adicionar Testemunho</h2>
      
      <form id="testimonial-form" class="space-y-6">
        <input type="hidden" id="testimonial-id" />
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label for="testimonial-name" class="block text-sm font-medium text-gray-700 mb-1">
              Nome
            </label>
            <input
              type="text"
              id="testimonial-name"
              required
              class="w-full px-4 py-2 rounded-lg border focus:ring-2 focus:ring-primary focus:border-primary"
              placeholder="Nome do cliente"
            />
          </div>
          <div>
            <label for="testimonial-role" class="block text-sm font-medium text-gray-700 mb-1">
              Função
            </label>
            <input
              type="text"
              id="testimonial-role"
              class="w-full px-4 py-2 rounded-lg border focus:ring-2 focus:ring-primary focus:border-primary"
              placeholder="Ex: Proprietário, Arquiteto, etc."
            />
          </div>
        </div>

        <div>
          <label for="testimonial-rating" class="block text-sm font-medium text-gray-700 mb-1">
            Avaliação
          </label>
          <div class="flex items-center gap-2">
            <select
              id="testimonial-rating"
              class="w-full px-4 py-2 rounded-lg border focus:ring-2 focus:ring-primary focus:border-primary"
            >
              <option value="5">5 estrelas</option>
              <option value="4">4 estrelas</option>
              <option value="3">3 estrelas</option>
              <option value="2">2 estrelas</option>
              <option value="1">1 estrela</option>
            </select>
            <div id="rating-stars" class="flex">
              <svg class="w-6 h-6 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
              </svg>
              <svg class="w-6 h-6 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
              </svg>
              <svg class="w-6 h-6 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
              </svg>
              <svg class="w-6 h-6 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
              </svg>
              <svg class="w-6 h-6 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
              </svg>
            </div>
          </div>
        </div>

        <div>
          <label for="testimonial-content" class="block text-sm font-medium text-gray-700 mb-1">
            Testemunho
          </label>
          <textarea
            id="testimonial-content"
            required
            rows="4"
            class="w-full px-4 py-2 rounded-lg border focus:ring-2 focus:ring-primary focus:border-primary"
            placeholder="Depoimento do cliente"
          ></textarea>
        </div>

        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">
            Foto do cliente
          </label>
          <div class="mt-1 flex items-center">
            <div id="photo-preview" class="hidden w-20 h-20 bg-gray-100 rounded-full overflow-hidden mr-4">
              <img id="preview-image" class="w-full h-full object-cover" />
            </div>
            <div class="flex-1">
              <input
                type="file"
                id="photo-file"
                accept="image/jpeg,image/png"
                class="hidden"
              />
              <div class="flex items-center">
                <span id="photo-filename" class="text-gray-500 flex-1">Nenhum arquivo selecionado</span>
                <button
                  type="button"
                  id="photo-browse-btn"
                  class="ml-3 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors"
                >
                  Procurar
                </button>
              </div>
              <p class="mt-1 text-sm text-gray-500">Formatos aceitos: JPG, PNG. Tamanho máx: 2 MB</p>
            </div>
          </div>
        </div>

        <div class="flex justify-end gap-4 pt-4">
          <button
            type="button"
            id="cancel-btn"
            class="px-6 py-2 border border-gray-300 text-gray-700 rounded-lg hover:border-gray-400 transition-colors"
          >
            Cancelar
          </button>
          <button
            type="submit"
            class="px-6 py-2 bg-primary text-white rounded-lg hover:bg-secondary transition-colors"
          >
            Salvar
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- Modal de confirmação para exclusão -->
  <div id="confirm-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
    <div class="bg-white rounded-xl shadow-lg p-8 max-w-md w-full mx-4">
      <h2 class="text-2xl font-bold mb-4">Confirmar Exclusão</h2>
      <p class="mb-6">Tem certeza que deseja excluir este testemunho? Esta ação não pode ser desfeita.</p>
      
      <div class="flex justify-end gap-4">
        <button
          id="cancel-delete-btn"
          class="px-6 py-2 border border-gray-300 text-gray-700 rounded-lg hover:border-gray-400 transition-colors"
        >
          Cancelar
        </button>
        <button
          id="confirm-delete-btn"
          class="px-6 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
        >
          Excluir
        </button>
      </div>
    </div>
  </div>
</Layout>

<script>
  import { contentManagement } from '../../lib/supabaseAdmin';
  
  // Elements
  const addTestimonialBtn = document.getElementById('add-testimonial-btn');
  const testimonialModal = document.getElementById('testimonial-modal');
  const modalTitle = document.getElementById('modal-title');
  const testimonialForm = document.getElementById('testimonial-form');
  const testimonialId = document.getElementById('testimonial-id');
  const testimonialName = document.getElementById('testimonial-name');
  const testimonialRole = document.getElementById('testimonial-role');
  const testimonialRating = document.getElementById('testimonial-rating');
  const testimonialContent = document.getElementById('testimonial-content');
  const photoFile = document.getElementById('photo-file');
  const photoFilename = document.getElementById('photo-filename');
  const photoBrowseBtn = document.getElementById('photo-browse-btn');
  const photoPreview = document.getElementById('photo-preview');
  const previewImage = document.getElementById('preview-image');
  const cancelBtn = document.getElementById('cancel-btn');
  const ratingStars = document.getElementById('rating-stars');
  
  // Confirmation modal elements
  const confirmModal = document.getElementById('confirm-modal');
  const cancelDeleteBtn = document.getElementById('cancel-delete-btn');
  const confirmDeleteBtn = document.getElementById('confirm-delete-btn');
  
  let testimonialToDelete = null;
  let selectedPhoto = null;
  
  // Handle add testimonial button
  addTestimonialBtn?.addEventListener('click', () => {
    // Reset form
    testimonialForm?.reset();
    testimonialId.value = '';
    
    // Reset photo preview
    if (photoPreview) photoPreview.classList.add('hidden');
    if (photoFilename) photoFilename.textContent = 'Nenhum arquivo selecionado';
    selectedPhoto = null;
    
    // Update modal title
    modalTitle.textContent = 'Adicionar Testemunho';
    
    // Show modal
    testimonialModal?.classList.remove('hidden');
    testimonialModal?.classList.add('flex');
    
    // Update rating stars
    updateRatingStars(5);
  });
  
  // Handle rating change
  testimonialRating?.addEventListener('change', () => {
    const rating = parseInt(testimonialRating.value);
    updateRatingStars(rating);
  });
  
  // Update rating stars
  function updateRatingStars(rating) {
    if (!ratingStars) return;
    
    const stars = ratingStars.querySelectorAll('svg');
    stars.forEach((star, index) => {
      if (index < rating) {
        star.classList.add('text-yellow-400');
        star.classList.remove('text-gray-300');
      } else {
        star.classList.remove('text-yellow-400');
        star.classList.add('text-gray-300');
      }
    });
  }
  
  // Handle photo browse button
  photoBrowseBtn?.addEventListener('click', () => {
    photoFile?.click();
  });
  
  // Handle photo file selection
  photoFile?.addEventListener('change', (e) => {
    const file = e.target.files?.[0];
    if (!file) return;
    
    // Validate file type
    if (!file.type.match('image/(jpeg|png)')) {
      alert('Formato de arquivo não suportado. Use JPG ou PNG.');
      photoFile.value = '';
      return;
    }
    
    // Validate file size (2MB max)
    if (file.size > 2 * 1024 * 1024) {
      alert('Arquivo muito grande. O tamanho máximo é 2MB.');
      photoFile.value = '';
      return;
    }
    
    // Update filename
    if (photoFilename) {
      photoFilename.textContent = file.name;
    }
    
    // Show preview
    if (photoPreview && previewImage) {
      const reader = new FileReader();
      reader.onload = (e) => {
        previewImage.src = e.target.result;
        photoPreview.classList.remove('hidden');
      };
      reader.readAsDataURL(file);
    }
    
    selectedPhoto = file;
  });
  
  // Handle form submission
  testimonialForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const id = testimonialId.value;
    const name = testimonialName.value;
    const role = testimonialRole.value;
    const rating = parseInt(testimonialRating.value);
    const content = testimonialContent.value;
    
    try {
      let testimonialData;
      
      if (id) {
        // Update existing testimonial
        testimonialData = await contentManagement.updateTestimonial(id, {
          name,
          role,
          rating,
          content
        });
        
        // Log activity
        await contentManagement.logActivity('update_testimonial', {
          id,
          name
        });
      } else {
        // Create new testimonial
        testimonialData = await contentManagement.createTestimonial({
          name,
          role,
          rating,
          content
        });
        
        // Log activity
        await contentManagement.logActivity('create_testimonial', {
          name
        });
      }
      
      // Upload photo if selected
      if (selectedPhoto && testimonialData) {
        const testimonialId = Array.isArray(testimonialData) ? testimonialData[0].id : testimonialData.id;
        
        // Upload to media storage
        const mediaData = await contentManagement.uploadMedia(selectedPhoto, 'testimonials');
        
        // Add to testimonial_media
        await contentManagement.addTestimonialMedia(testimonialId, mediaData.url);
      }
      
      // Close modal
      testimonialModal?.classList.add('hidden');
      testimonialModal?.classList.remove('flex');
      
      // Reload page
      window.location.reload();
    } catch (error) {
      console.error('Error saving testimonial:', error);
      alert('Erro ao salvar testemunho. Por favor, tente novamente.');
    }
  });
  
  // Handle cancel button
  cancelBtn?.addEventListener('click', () => {
    testimonialModal?.classList.add('hidden');
    testimonialModal?.classList.remove('flex');
  });
  
  // Handle edit testimonial buttons
  document.querySelectorAll('.edit-testimonial-btn').forEach(btn => {
    btn.addEventListener('click', async () => {
      const id = btn.getAttribute('data-testimonial-id');
      if (!id) return;
      
      try {
        // Get testimonial data
        const testimonial = await contentManagement.getTestimonial(id);
        
        // Update form
        testimonialId.value = id;
        testimonialName.value = testimonial.name;
        testimonialRole.value = testimonial.role || '';
        testimonialRating.value = testimonial.rating || 5;
        testimonialContent.value = testimonial.content;
        
        // Update rating stars
        updateRatingStars(testimonial.rating || 5);
        
        // Update photo preview if available
        if (testimonial.testimonial_media && testimonial.testimonial_media.length > 0) {
          const media = testimonial.testimonial_media[0];
          if (photoPreview && previewImage) {
            previewImage.src = media.url;
            photoPreview.classList.remove('hidden');
          }
          if (photoFilename) {
            photoFilename.textContent = 'Foto existente';
          }
        } else {
          if (photoPreview) {
            photoPreview.classList.add('hidden');
          }
          if (photoFilename) {
            photoFilename.textContent = 'Nenhum arquivo selecionado';
          }
        }
        
        // Update modal title
        modalTitle.textContent = 'Editar Testemunho';
        
        // Show modal
        testimonialModal?.classList.remove('hidden');
        testimonialModal?.classList.add('flex');
      } catch (error) {
        console.error('Error fetching testimonial:', error);
        alert('Erro ao carregar testemunho. Por favor, tente novamente.');
      }
    });
  });
  
  // Handle delete testimonial buttons
  document.querySelectorAll('.delete-testimonial-btn').forEach(btn => {
    btn.addEventListener('click', () => {
      const id = btn.getAttribute('data-testimonial-id');
      if (!id) return;
      
      testimonialToDelete = id;
      
      // Show confirmation modal
      confirmModal?.classList.remove('hidden');
      confirmModal?.classList.add('flex');
    });
  });
  
  // Handle cancel delete button
  cancelDeleteBtn?.addEventListener('click', () => {
    confirmModal?.classList.add('hidden');
    confirmModal?.classList.remove('flex');
    testimonialToDelete = null;
  });
  
  // Handle confirm delete button
  confirmDeleteBtn?.addEventListener('click', async () => {
    if (!testimonialToDelete) return;
    
    try {
      await contentManagement.deleteTestimonial(testimonialToDelete);
      
      // Log activity
      await contentManagement.logActivity('delete_testimonial', {
        id: testimonialToDelete
      });
      
      // Close modal
      confirmModal?.classList.add('hidden');
      confirmModal?.classList.remove('flex');
      
      // Reload page
      window.location.reload();
    } catch (error) {
      console.error('Error deleting testimonial:', error);
      alert('Erro ao excluir testemunho. Por favor, tente novamente.');
    }
  });
  
  // Helper function to add testimonial media
  contentManagement.addTestimonialMedia = async (testimonialId, url) => {
    const supabase = contentManagement.createAdminClient();
    const { data, error } = await supabase
      .from('testimonial_media')
      .insert({
        testimonial_id: testimonialId,
        media_type: 'image',
        url: url
      })
      .select();
    
    if (error) throw error;
    return data;
  };
  
  // Helper function to get a single testimonial
  contentManagement.getTestimonial = async (id) => {
    const supabase = contentManagement.createAdminClient();
    const { data, error } = await supabase
      .from('testimonials')
      .select(`
        *,
        testimonial_media(*)
      `)
      .eq('id', id)
      .single();
    
    if (error) throw error;
    return data;
  };
</script>