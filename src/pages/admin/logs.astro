---
import Layout from '../../layouts/AdminLayout.astro';
import { contentManagement, authManagement } from '../../lib/supabaseAdmin';

// Check if user is admin
const isAdmin = await authManagement.isAdmin();
if (!isAdmin) {
  return Astro.redirect('/admin/login');
}

// Get activity logs
let logs = [];
try {
  logs = await contentManagement.getActivityLogs(100);
} catch (error) {
  console.error('Error fetching logs:', error);
}
---

<Layout title="Logs de Atividade">
  <div class="pt-32 pb-20">
    <div class="container mx-auto px-4">
      <div class="max-w-6xl mx-auto">
        <!-- Header -->
        <div class="flex justify-between items-center mb-8">
          <div>
            <h1 class="text-3xl font-bold">Logs de Atividade</h1>
            <p class="text-gray-600 mt-2">Histórico de ações realizadas no painel de administração</p>
          </div>
          <a 
            href="/admin"
            class="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:border-primary hover:text-primary transition-colors"
          >
            Voltar
          </a>
        </div>

        <!-- Logs Table -->
        <div class="bg-white rounded-xl shadow-lg overflow-hidden">
          <div class="p-6">
            <div class="overflow-x-auto">
              <table class="w-full">
                <thead>
                  <tr class="border-b">
                    <th class="text-left py-4 px-4">Data/Hora</th>
                    <th class="text-left py-4 px-4">Usuário</th>
                    <th class="text-left py-4 px-4">Ação</th>
                    <th class="text-left py-4 px-4">Detalhes</th>
                  </tr>
                </thead>
                <tbody>
                  {logs.length > 0 ? (
                    logs.map((log) => (
                      <tr class="border-b hover:bg-gray-50">
                        <td class="py-4 px-4 whitespace-nowrap">
                          {new Date(log.created_at).toLocaleString('pt-BR')}
                        </td>
                        <td class="py-4 px-4">
                          {log.user_id ? log.user_id.substring(0, 8) + '...' : 'Sistema'}
                        </td>
                        <td class="py-4 px-4">
                          <span class={`px-3 py-1 rounded-full text-sm ${getActionColor(log.action)}`}>
                            {formatAction(log.action)}
                          </span>
                        </td>
                        <td class="py-4 px-4">
                          <button 
                            class="view-details-btn text-primary hover:text-secondary transition-colors"
                            data-details={JSON.stringify(log.details)}
                          >
                            Ver detalhes
                          </button>
                        </td>
                      </tr>
                    ))
                  ) : (
                    <tr>
                      <td colspan="4" class="py-8 text-center text-gray-500">
                        Nenhum log de atividade encontrado.
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal para visualizar detalhes -->
  <div id="details-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
    <div class="bg-white rounded-xl shadow-lg p-8 max-w-2xl w-full mx-4">
      <h2 class="text-2xl font-bold mb-6">Detalhes da Ação</h2>
      
      <div id="details-content" class="bg-gray-50 p-4 rounded-lg overflow-auto max-h-96">
        <pre class="text-sm whitespace-pre-wrap"></pre>
      </div>
      
      <div class="flex justify-end mt-6">
        <button
          id="close-details-btn"
          class="px-6 py-2 bg-primary text-white rounded-lg hover:bg-secondary transition-colors"
        >
          Fechar
        </button>
      </div>
    </div>
  </div>
</Layout>

<script>
  // Elements
  const viewDetailsBtns = document.querySelectorAll('.view-details-btn');
  const detailsModal = document.getElementById('details-modal');
  const detailsContent = document.getElementById('details-content')?.querySelector('pre');
  const closeDetailsBtn = document.getElementById('close-details-btn');
  
  // Handle view details button
  viewDetailsBtns.forEach(btn => {
    btn.addEventListener('click', () => {
      const details = JSON.parse(btn.getAttribute('data-details') || '{}');
      
      // Format details
      if (detailsContent) {
        detailsContent.textContent = JSON.stringify(details, null, 2);
      }
      
      // Show modal
      detailsModal?.classList.remove('hidden');
      detailsModal?.classList.add('flex');
    });
  });
  
  // Handle close details button
  closeDetailsBtn?.addEventListener('click', () => {
    detailsModal?.classList.add('hidden');
    detailsModal?.classList.remove('flex');
  });
</script>

<style>
  /* Syntax highlighting for JSON */
  pre {
    font-family: monospace;
    color: #333;
  }
</style>

<script is:inline>
  // Helper functions for formatting
  function formatAction(action) {
    const actionMap = {
      'create_content': 'Criar Conteúdo',
      'update_content': 'Atualizar Conteúdo',
      'delete_content': 'Excluir Conteúdo',
      'upload_media': 'Carregar Media',
      'delete_media': 'Excluir Media',
      'create_project': 'Criar Projeto',
      'update_project': 'Atualizar Projeto',
      'delete_project': 'Excluir Projeto',
      'create_blog_post': 'Criar Post',
      'update_blog_post': 'Atualizar Post',
      'delete_blog_post': 'Excluir Post',
      'create_testimonial': 'Criar Testemunho',
      'update_testimonial': 'Atualizar Testemunho',
      'delete_testimonial': 'Excluir Testemunho',
      'create_partner': 'Criar Parceiro',
      'update_partner': 'Atualizar Parceiro',
      'delete_partner': 'Excluir Parceiro',
      'update_settings': 'Atualizar Configurações'
    };
    
    return actionMap[action] || action;
  }
  
  function getActionColor(action) {
    if (action.startsWith('create')) {
      return 'bg-green-100 text-green-800';
    } else if (action.startsWith('update')) {
      return 'bg-blue-100 text-blue-800';
    } else if (action.startsWith('delete')) {
      return 'bg-red-100 text-red-800';
    } else if (action.startsWith('upload')) {
      return 'bg-purple-100 text-purple-800';
    } else {
      return 'bg-gray-100 text-gray-800';
    }
  }
</script>