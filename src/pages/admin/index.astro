---
import Layout from '../../layouts/Layout.astro';
import { admin } from '../../content/website-text';
import { supabase } from '/src/supabase.ts'; // Corrigé : chemin absolu vers src/supabase.ts

// Check authentication on page load
const { data: { session } } = await supabase.auth.getSession();
if (!session) {
  return Astro.redirect('/admin/login');
}

const { dashboard } = admin;

// Fetch contact info from Supabase
const { data: settings, error } = await supabase
  .from('settings')
  .select('contacts')
  .eq('id', 1)
  .single();

const contacts = settings?.contacts || {
  phone: "XX XX XX XX XX",
  email: "contacto@alusteel.pt",
  address: "A definir"
};
---

<Layout title="Administração">
  <div class="pt-32 pb-20">
    <div class="container mx-auto px-4">
      <div class="max-w-4xl mx-auto">
        <div class="flex justify-between items-center mb-8">
          <h1 class="text-3xl font-bold">{dashboard.title}</h1>
          <div class="flex gap-4">
            <a 
              href="/"
              class="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:border-primary hover:text-primary transition-colors"
            >
              {dashboard.backToSite}
            </a>
            <button 
              id="logout-btn"
              class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors"
            >
              {dashboard.logout}
            </button>
          </div>
        </div>

        <!-- Menu d'administration -->
        <div class="grid md:grid-cols-2 gap-6 mb-8">
          {dashboard.sections.map((section) => (
            <a href={`/admin/${section.title.toLowerCase().replace(/\s+/g, '-').replace(/:/g, '')}`} class="bg-white rounded-xl shadow-lg p-6 hover:shadow-xl transition-all duration-300">
              <div class="flex items-center gap-4">
                <div class="p-3 bg-primary/10 rounded-lg">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={section.icon} />
                  </svg>
                </div>
                <div>
                  <h2 class="text-xl font-semibold mb-1">{section.title}</h2>
                  <p class="text-gray-600">{section.description}</p>
                </div>
              </div>
            </a>
          ))}
        </div>

        <!-- Logo Upload -->
        <div class="bg-white rounded-xl shadow-lg p-6 mb-8">
          <h2 class="text-xl font-semibold mb-4">{dashboard.logo.title}</h2>
          <div class="flex items-center gap-4">
            <img
              id="current-logo"
              src="/images/logo.svg"
              alt="Logo atual"
              class="h-16 w-auto"
            />
            <div>
              <input
                type="file"
                id="logo-upload"
                accept="image/svg+xml"
                class="hidden"
              />
              <button
                onclick="document.getElementById('logo-upload').click()"
                class="px-4 py-2 bg-primary text-white rounded-lg hover:bg-secondary transition-colors"
              >
                {dashboard.logo.button}
              </button>
            </div>
          </div>
        </div>

        <!-- Contact Information -->
        <div class="bg-white rounded-xl shadow-lg p-6">
          <h2 class="text-xl font-semibold mb-4">{dashboard.contactInfo.title}</h2>
          <form id="contact-form" class="space-y-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">
                {dashboard.contactInfo.phone}
              </label>
              <input
                type="tel"
                name="phone"
                value={contacts.phone}
                class="w-full px-4 py-2 rounded-lg border focus:ring-2 focus:ring-primary focus:border-primary"
              />
            </div>

            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">
                {dashboard.contactInfo.email}
              </label>
              <input
                type="email"
                name="email"
                value={contacts.email}
                class="w-full px-4 py-2 rounded-lg border focus:ring-2 focus:ring-primary focus:border-primary"
              />
            </div>

            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">
                {dashboard.contactInfo.address}
              </label>
              <textarea
                name="address"
                rows="3"
                class="w-full px-4 py-2 rounded-lg border focus:ring-2 focus:ring-primary focus:border-primary"
              >{contacts.address}</textarea>
            </div>

            <button
              type="submit"
              class="w-full px-6 py-3 bg-primary text-white rounded-lg hover:bg-secondary transition-colors"
            >
              {dashboard.contactInfo.button}
            </button>
          </form>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  import { supabase } from '/src/supabase.ts'; // Corrigé : chemin absolu vers src/supabase.ts

  // Client-side authentication check
  async function checkAuth() {
    const { data, error } = await supabase.auth.getSession();
    if (!data.session) {
      window.location.href = '/admin/login';
    }
  }
  
  // Check auth on page load
  checkAuth();

  // Handle contact form submission
  const form = document.getElementById('contact-form');
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(e.target as HTMLFormElement);
    
    const contacts = {
      phone: formData.get('phone'),
      email: formData.get('email'),
      address: formData.get('address')
    };
    
    try {
      const { data, error } = await supabase
        .from('settings')
        .upsert({ 
          id: 1, 
          contacts 
        });
      
      if (error) throw error;
      
      alert('As informações de contacto foram atualizadas com sucesso!');
    } catch (error) {
      console.error('Error updating contact info:', error);
      alert('Ocorreu um erro ao atualizar as informações de contacto.');
    }
  });

  // Handle logo upload
  const logoInput = document.getElementById('logo-upload') as HTMLInputElement;
  logoInput?.addEventListener('change', async (e) => {
    const file = logoInput.files?.[0];
    if (!file) return;

    try {
      // Upload to Supabase Storage
      const { data, error } = await supabase.storage
        .from('public')
        .upload(`logos/${Date.now()}_${file.name}`, file, {
          upsert: true
        });
      
      if (error) throw error;
      
      // Get public URL
      const { data: publicUrlData } = supabase.storage
        .from('public')
        .getPublicUrl(data.path);
      
      // Update logo in UI
      const img = document.getElementById('current-logo') as HTMLImageElement;
      img.src = publicUrlData.publicUrl;
      
      alert('Logótipo atualizado com sucesso!');
    } catch (error) {
      console.error('Error uploading logo:', error);
      alert('Ocorreu um erro ao carregar o logótipo.');
    }
  });

  // Handle logout
  const logoutBtn = document.getElementById('logout-btn');
  logoutBtn?.addEventListener('click', async () => {
    try {
      const { error } = await supabase.auth.signOut();
      if (error) throw error;
      
      // Clear localStorage
      localStorage.removeItem('alusteel_session');
      
      // Clear cookie
      document.cookie = 'alusteel_session=; path=/; max-age=0';
      
      // Redirect to login
      window.location.href = '/admin/login';
    } catch (error) {
      console.error('Error signing out:', error);
    }
  });
</script>