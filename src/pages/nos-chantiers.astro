---
import Layout from '../layouts/Layout.astro';
import { nosChantiers } from '../content/website-text';

const { hero, categories, projects, cta } = nosChantiers;

// Pagination logic
const projectsPerPage = 3;
const totalPages = Math.ceil(projects.length / projectsPerPage);
---

<Layout title="Nos Chantiers" description="Galerie de nos réalisations en menuiserie et serrurerie">
  <div class="pt-20">
    <!-- Hero Section -->
    <section class="relative py-20 bg-gradient-to-b from-gray-900 to-gray-800">
      <div class="container mx-auto px-4">
        <div class="max-w-3xl mx-auto text-center">
          <h1 class="text-4xl md:text-5xl font-bold text-white mb-6">
            {hero.title}
          </h1>
          <p class="text-xl text-gray-300">
            {hero.description}
          </p>
        </div>
      </div>
    </section>

    <!-- Projects Section -->
    <section class="py-20">
      <div class="container mx-auto px-4">
        <!-- Filtres -->
        <div class="flex flex-wrap justify-center gap-4 mb-12">
          {categories.map((category, index) => (
            <button 
              class={`px-6 py-2 rounded-full transition-all duration-300 ${
                index === 0 
                  ? "bg-primary text-white hover:bg-secondary" 
                  : "border border-gray-300 hover:border-primary hover:text-primary"
              }`}
              data-category={category}
            >
              {category}
            </button>
          ))}
        </div>

        <!-- Galerie -->
        <div id="projects-container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {projects.map((project, index) => (
            <div class="group relative overflow-hidden rounded-2xl shadow-lg bg-white project-item" 
                data-category={project.category} 
                data-page="1" 
                data-project-id={project.id}
                style={index >= projectsPerPage ? "display: none;" : ""}>
              <div class="relative h-64">
                <img 
                  src={project.imageUrl} 
                  alt={project.title}
                  class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110"
                />
                <div class="absolute inset-0 bg-gradient-to-t from-black/70 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
              </div>
              <div class="p-6">
                <div class="flex justify-between items-start mb-4">
                  <span class="inline-block px-4 py-1 rounded-full bg-primary/10 text-primary text-sm">
                    {project.category}
                  </span>
                  <span class="inline-block text-sm text-gray-500 italic">
                    {project.city}
                  </span>
                </div>
                <h3 class="text-xl font-bold mb-2 group-hover:text-primary transition-colors">
                  {project.title}
                </h3>
                <p class="text-gray-600 mb-4">
                  {project.description}
                </p>
                <button class="text-primary font-semibold hover:text-secondary transition-colors inline-flex items-center view-project-btn">
                  Voir le projet
                  <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                  </svg>
                </button>
              </div>
            </div>
          ))}
        </div>

        <!-- Pagination -->
        <div class="mt-12 flex justify-center gap-2">
          {Array.from({ length: totalPages }).map((_, index) => (
            <button 
              class={`w-10 h-10 rounded-full flex items-center justify-center transition-all duration-300 pagination-btn ${
                index === 0 
                  ? "bg-primary text-white" 
                  : "border border-gray-300 hover:border-primary hover:text-primary"
              }`}
              data-page={index + 1}
            >
              {index + 1}
            </button>
          ))}
        </div>

        <!-- CTA Section -->
        <div class="mt-20 text-center">
          <div class="max-w-2xl mx-auto bg-gradient-to-r from-primary/10 to-secondary/10 rounded-2xl p-8">
            <h2 class="text-3xl font-bold mb-4">{cta.title}</h2>
            <p class="text-gray-600 mb-8">
              {cta.description}
            </p>
            <a href="/contact" class="inline-block bg-primary hover:bg-secondary text-white px-8 py-4 rounded-full text-lg font-semibold transition-all duration-300 transform hover:scale-105">
              {cta.buttonText}
            </a>
          </div>
        </div>
      </div>
    </section>
  </div>
</Layout>

<script>
  // Pagination functionality
  document.addEventListener('DOMContentLoaded', () => {
    const projectsPerPage = 3;
    const projectItems = document.querySelectorAll('.project-item');
    const paginationBtns = document.querySelectorAll('.pagination-btn');
    const categoryBtns = document.querySelectorAll('[data-category]');
    const viewProjectBtns = document.querySelectorAll('.view-project-btn');
    
    let currentPage = 1;
    let currentCategory = 'Tous';

    // Function to show projects based on page and category
    function showProjects(page, category) {
      let visibleCount = 0;
      
      projectItems.forEach(item => {
        const itemCategory = item.getAttribute('data-category');
        const shouldShowCategory = category === 'Tous' || itemCategory === category;
        
        // Hide all items first
        item.style.display = 'none';
        
        // If category matches, consider for pagination
        if (shouldShowCategory) {
          const startIndex = (page - 1) * projectsPerPage;
          const endIndex = startIndex + projectsPerPage;
          
          if (visibleCount >= startIndex && visibleCount < endIndex) {
            item.style.display = 'block';
          }
          
          visibleCount++;
        }
      });
      
      // Update pagination buttons
      const totalPages = Math.ceil(visibleCount / projectsPerPage);
      
      paginationBtns.forEach((btn, index) => {
        const btnPage = index + 1;
        
        // Show/hide pagination buttons based on total pages
        btn.style.display = btnPage <= totalPages ? 'flex' : 'none';
        
        // Update active state
        if (btnPage === page) {
          btn.classList.add('bg-primary', 'text-white');
          btn.classList.remove('border', 'border-gray-300', 'hover:border-primary', 'hover:text-primary');
        } else {
          btn.classList.remove('bg-primary', 'text-white');
          btn.classList.add('border', 'border-gray-300', 'hover:border-primary', 'hover:text-primary');
        }
      });
    }

    // Initialize
    showProjects(currentPage, currentCategory);

    // Handle pagination clicks
    paginationBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        currentPage = parseInt(btn.getAttribute('data-page'));
        showProjects(currentPage, currentCategory);
      });
    });

    // Handle category filter clicks
    categoryBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        currentCategory = btn.getAttribute('data-category');
        currentPage = 1; // Reset to first page when changing category
        
        // Update active category button
        categoryBtns.forEach(catBtn => {
          if (catBtn.getAttribute('data-category') === currentCategory) {
            catBtn.classList.add('bg-primary', 'text-white');
            catBtn.classList.remove('border', 'border-gray-300', 'hover:border-primary', 'hover:text-primary');
          } else {
            catBtn.classList.remove('bg-primary', 'text-white');
            catBtn.classList.add('border', 'border-gray-300', 'hover:border-primary', 'hover:text-primary');
          }
        });
        
        showProjects(currentPage, currentCategory);
      });
    });

    // Get project data from the nosChantiers object
    const projects = [
      {
        id: 1,
        title: "Menuiserie aluminium",
        category: "Fenêtres",
        description: "Installation de fenêtres en aluminium pour une villa moderne",
        city: "Lyon",
        imageUrl: "https://images.unsplash.com/photo-1600585154526-990dced4db0d?ixlib=rb-4.0.3",
        media: [
          { type: "image", url: "https://images.unsplash.com/photo-1600585154526-990dced4db0d?ixlib=rb-4.0.3" },
          { type: "image", url: "https://images.unsplash.com/photo-1600585154340-be6161a56a0c?ixlib=rb-4.0.3" },
          { type: "image", url: "https://images.unsplash.com/photo-1600566753376-12c8ab7fb75b?ixlib=rb-4.0.3" }
        ]
      },
      {
        id: 2,
        title: "Porte d'entrée",
        category: "Portes",
        description: "Porte d'entrée design en aluminium noir mat",
        city: "Paris",
        imageUrl: "https://images.unsplash.com/photo-1600573472591-ee6c563aaec9?ixlib=rb-4.0.3",
        media: [
          { type: "image", url: "https://images.unsplash.com/photo-1600573472591-ee6c563aaec9?ixlib=rb-4.0.3" },
          { type: "image", url: "https://images.unsplash.com/photo-1600573472592-999f3c32d1b9?ixlib=rb-4.0.3" }
        ]
      },
      {
        id: 3,
        title: "Véranda moderne",
        category: "Vérandas",
        description: "Véranda contemporaine avec toiture plate",
        city: "Bordeaux",
        imageUrl: "https://images.unsplash.com/photo-1600585154340-be6161a56a0c?ixlib=rb-4.0.3",
        media: [
          { type: "image", url: "https://images.unsplash.com/photo-1600585154340-be6161a56a0c?ixlib=rb-4.0.3" },
          { type: "image", url: "https://images.unsplash.com/photo-1600585154526-990dced4db0d?ixlib=rb-4.0.3" }
        ]
      },
      {
        id: 4,
        title: "Serrurerie",
        category: "Sécurité",
        description: "Installation d'un système de sécurité haute performance",
        city: "Marseille",
        imageUrl: "https://images.unsplash.com/photo-1600566753376-12c8ab7fb75b?ixlib=rb-4.0.3",
        media: [
          { type: "image", url: "https://images.unsplash.com/photo-1600566753376-12c8ab7fb75b?ixlib=rb-4.0.3" }
        ]
      },
      {
        id: 5,
        title: "Baie vitrée",
        category: "Fenêtres",
        description: "Baie vitrée à galandage pour une vue panoramique",
        city: "Nice",
        imageUrl: "https://images.unsplash.com/photo-1600566752355-35792bedcfea?ixlib=rb-4.0.3",
        media: [
          { type: "image", url: "https://images.unsplash.com/photo-1600566752355-35792bedcfea?ixlib=rb-4.0.3" },
          { type: "image", url: "https://images.unsplash.com/photo-1600566753376-12c8ab7fb75b?ixlib=rb-4.0.3" }
        ]
      },
      {
        id: 6,
        title: "Porte de garage",
        category: "Portes",
        description: "Porte de garage sectionnelle motorisée",
        city: "Toulouse",
        imageUrl: "https://images.unsplash.com/photo-1600573472592-999f3c32d1b9?ixlib=rb-4.0.3",
        media: [
          { type: "image", url: "https://images.unsplash.com/photo-1600573472592-999f3c32d1b9?ixlib=rb-4.0.3" },
          { type: "image", url: "https://images.unsplash.com/photo-1600573472591-ee6c563aaec9?ixlib=rb-4.0.3" }
        ]
      }
    ];

    // Function to get project data by ID
    function getProjectById(id) {
      return projects.find(p => p.id === parseInt(id));
    }

    // Handle "Voir le projet" button clicks
    viewProjectBtns.forEach(btn => {
      btn.addEventListener('click', (e) => {
        e.preventDefault();
        const projectItem = btn.closest('.project-item');
        const projectId = projectItem.getAttribute('data-project-id');
        
        if (projectId) {
          const project = getProjectById(parseInt(projectId));
          if (project) {
            showProjectModal(project);
          }
        }
      });
    });

    // Function to show a project modal
    function showProjectModal(project) {
      if (!project) return;
      
      // Create modal elements
      const modalOverlay = document.createElement('div');
      modalOverlay.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
      
      const modalContent = document.createElement('div');
      modalContent.className = 'bg-white rounded-xl shadow-lg p-8 max-w-4xl w-full mx-4 relative max-h-[90vh] overflow-y-auto';
      
      const closeBtn = document.createElement('button');
      closeBtn.className = 'absolute top-4 right-4 text-gray-500 hover:text-gray-700';
      closeBtn.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      `;
      
      const header = document.createElement('div');
      header.className = 'mb-6';
      
      const title = document.createElement('h2');
      title.className = 'text-2xl font-bold mb-2';
      title.textContent = project.title;
      
      const locationAndCategory = document.createElement('div');
      locationAndCategory.className = 'flex justify-between items-center mb-4';
      locationAndCategory.innerHTML = `
        <span class="inline-block px-4 py-1 rounded-full bg-primary/10 text-primary text-sm">
          ${project.category}
        </span>
        <span class="text-gray-600 italic">
          ${project.city}
        </span>
      `;
      
      const description = document.createElement('p');
      description.className = 'text-gray-600 mb-6';
      description.textContent = project.description;
      
      // Media gallery
      const mediaGallery = document.createElement('div');
      mediaGallery.className = 'grid grid-cols-1 md:grid-cols-2 gap-4 mb-6';
      
      if (project.media && project.media.length > 0) {
        project.media.forEach(media => {
          const mediaItem = document.createElement('div');
          mediaItem.className = 'rounded-lg overflow-hidden shadow-md';
          
          if (media.type === 'image') {
            const img = document.createElement('img');
            img.src = media.url;
            img.alt = project.title;
            img.className = 'w-full h-64 object-cover';
            mediaItem.appendChild(img);
          } else if (media.type === 'video') {
            const video = document.createElement('video');
            video.src = media.url;
            video.controls = true;
            video.className = 'w-full h-64 object-cover';
            mediaItem.appendChild(video);
          }
          
          mediaGallery.appendChild(mediaItem);
        });
      } else {
        const noMedia = document.createElement('p');
        noMedia.className = 'text-gray-500 italic col-span-2 text-center py-8';
        noMedia.textContent = 'Aucun média disponible pour ce projet.';
        mediaGallery.appendChild(noMedia);
      }
      
      const footer = document.createElement('div');
      footer.className = 'flex justify-end';
      footer.innerHTML = `
        <button class="px-6 py-2 bg-primary text-white rounded-lg hover:bg-secondary transition-colors">Fermer</button>
      `;
      
      // Assemble modal
      header.appendChild(title);
      header.appendChild(locationAndCategory);
      
      modalContent.appendChild(closeBtn);
      modalContent.appendChild(header);
      modalContent.appendChild(description);
      modalContent.appendChild(mediaGallery);
      modalContent.appendChild(footer);
      modalOverlay.appendChild(modalContent);
      
      // Add to body
      document.body.appendChild(modalOverlay);
      
      // Handle close events
      closeBtn.addEventListener('click', () => {
        document.body.removeChild(modalOverlay);
      });
      
      footer.querySelector('button').addEventListener('click', () => {
        document.body.removeChild(modalOverlay);
      });
      
      modalOverlay.addEventListener('click', (e) => {
        if (e.target === modalOverlay) {
          document.body.removeChild(modalOverlay);
        }
      });
    }
  });
</script>